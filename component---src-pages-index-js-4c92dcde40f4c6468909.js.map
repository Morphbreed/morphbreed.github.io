{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_entry__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_3__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_3___default","_withRoot__WEBPACK_IMPORTED_MODULE_4__","withRoot","_ref","entries","data","allMarkdownRemark","edges","map","entry","date","node","frontmatter","category","course","courseUrl","title","text","excerpt","index","a","createElement","key","content","style","marginBottom","variant","color"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAAO,EAAAG,GAAAE,EAAAZ,EAAA,KA8Cea,sBAvCG,SAAAC,GAAc,IAgB1BC,EAhB0BD,EAAXE,KACIC,kBAAkBC,MAAMC,IAAI,SAAAC,GACjD,MAAO,CACLC,KAAMD,EAAME,KAAKC,YAAYF,KAC7BG,SAAUJ,EAAME,KAAKC,YAAYC,SACjCC,OAAQL,EAAME,KAAKC,YAAYE,OAC3BL,EAAME,KAAKC,YAAYE,OACvB,GACJC,UAAWN,EAAME,KAAKC,YAAYG,UAC9BN,EAAME,KAAKC,YAAYG,UACvB,GACJC,MAAOP,EAAME,KAAKC,YAAYI,MAC9BC,KAAMR,EAAME,KAAKO,WAIKV,IAAI,SAACC,EAAOU,GAAR,OAC5BxB,EAAAyB,EAAAC,cAACvB,EAAA,EAAD,CACEwB,IAAKH,EACLT,KAAMD,EAAMC,KACZM,MAAOP,EAAMO,MACbH,SAAUJ,EAAMI,SAChBU,QACE5B,EAAAyB,EAAAC,cAACrB,EAAAoB,EAAD,CACEI,MAAO,CAAEC,aAAc,IACvBC,QAAQ,QACRC,MAAM,WAELlB,EAAMQ,MAGXH,OAAQL,EAAMK,OACdC,UAAWN,EAAMM,cAIrB,OAAOpB,EAAAyB,EAAAC,cAACxB,EAAA,EAAD,CAAQmB,MAAM,SAASZ,KAKzB,IAAMX,EAAK","file":"component---src-pages-index-js-4c92dcde40f4c6468909.js","sourcesContent":["import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport Entry from '../components/entry'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport withRoot from '../withRoot'\r\n\r\nconst IndexPage = ({ data }) => {\r\n  let entriesData = data.allMarkdownRemark.edges.map(entry => {\r\n    return {\r\n      date: entry.node.frontmatter.date,\r\n      category: entry.node.frontmatter.category,\r\n      course: entry.node.frontmatter.course\r\n        ? entry.node.frontmatter.course\r\n        : '',\r\n      courseUrl: entry.node.frontmatter.courseUrl\r\n        ? entry.node.frontmatter.courseUrl\r\n        : '',\r\n      title: entry.node.frontmatter.title,\r\n      text: entry.node.excerpt,\r\n    }\r\n  })\r\n\r\n  let entries = entriesData.map((entry, index) => (\r\n    <Entry\r\n      key={index}\r\n      date={entry.date}\r\n      title={entry.title}\r\n      category={entry.category}\r\n      content={\r\n        <Typography\r\n          style={{ marginBottom: 10 }}\r\n          variant=\"body1\"\r\n          color=\"inherit\"\r\n        >\r\n          {entry.text}\r\n        </Typography>\r\n      }\r\n      course={entry.course}\r\n      courseUrl={entry.courseUrl}\r\n    />\r\n  ))\r\n\r\n  return <Layout title=\"Index\">{entries}</Layout>\r\n}\r\n\r\nexport default withRoot(IndexPage)\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date\r\n            course\r\n            courseUrl\r\n            category\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}